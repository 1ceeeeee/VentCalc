// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VentCalc.Persistence;

namespace VentCalc.Migrations
{
    [DbContext(typeof(VentCalcDbContext))]
    [Migration("20180407205038_AddRoomInflowCalcAndExhaustCalc")]
    partial class AddRoomInflowCalcAndExhaustCalc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VentCalc.Models.BuildingKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuildingKindName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("BuildingKinds");
                });

            modelBuilder.Entity("VentCalc.Models.BuildingPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuildingKindId");

                    b.Property<string>("BuildingPurposeName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BuildingKindId");

                    b.ToTable("BuildingPurposes");
                });

            modelBuilder.Entity("VentCalc.Models.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuildingPurposeId");

                    b.Property<string>("BuildingTypeName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BuildingPurposeId");

                    b.ToTable("BuildingTypes");
                });

            modelBuilder.Entity("VentCalc.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("RegionId");

                    b.Property<double>("TempOutSummer");

                    b.Property<double>("TempOutWinter");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("VentCalc.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("VentCalc.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("VentCalc.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Area");

                    b.Property<int>("BuildingTypeId");

                    b.Property<int>("CityId");

                    b.Property<double>("ExhaustCalc");

                    b.Property<int>("Floor");

                    b.Property<double>("Height");

                    b.Property<double>("InflowCalc");

                    b.Property<double>("Length");

                    b.Property<int>("PeopleAmount");

                    b.Property<int>("ProjectId");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("RoomNumber");

                    b.Property<int>("RoomTypeId");

                    b.Property<int>("UserId");

                    b.Property<double>("Volume");

                    b.Property<double>("Width");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("VentCalc.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Exhaust");

                    b.Property<double>("HumidityFrom");

                    b.Property<double>("HumidityRelative");

                    b.Property<double>("HumidityTo");

                    b.Property<double>("Inflow");

                    b.Property<bool>("IsForPeople");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double>("TempIn");

                    b.Property<string>("Unit")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("VentCalc.Models.BuildingPurpose", b =>
                {
                    b.HasOne("VentCalc.Models.BuildingKind", "BuildingKind")
                        .WithMany("BuildingPurposes")
                        .HasForeignKey("BuildingKindId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VentCalc.Models.BuildingType", b =>
                {
                    b.HasOne("VentCalc.Models.BuildingPurpose", "BuildingPurpose")
                        .WithMany("BuildingTypes")
                        .HasForeignKey("BuildingPurposeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VentCalc.Models.City", b =>
                {
                    b.HasOne("VentCalc.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VentCalc.Models.Room", b =>
                {
                    b.HasOne("VentCalc.Models.BuildingType", "BuildingType")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VentCalc.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VentCalc.Models.Project", "Project")
                        .WithMany("Rooms")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VentCalc.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
